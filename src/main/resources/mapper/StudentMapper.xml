<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.food.dao.StudentMapper">
	<resultMap id="BaseResultMap" type="com.food.bean.Student">
		<id column="sid" jdbcType="INTEGER" property="sid" />
		<result column="sname" jdbcType="VARCHAR" property="sname" />
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="age" jdbcType="INTEGER" property="age" />
		<result column="gid" jdbcType="INTEGER" property="gid" />
	</resultMap>
	
	<!-- 自定义返回类型 -->
	<resultMap type="com.food.bean.Student"
		id="WithGradeBaseResultMap">
		<id column="sid" jdbcType="INTEGER" property="sid" />
		<result column="sname" jdbcType="VARCHAR" property="sname" />
		<result column="sex" jdbcType="VARCHAR" property="sex" />
		<result column="age" jdbcType="INTEGER" property="age" />
		<result column="gid" jdbcType="INTEGER" property="gid" />
		<association property="grade"
			javaType="com.food.bean.Grade">
			<id column="gid" property="gid" />
			<result column="gname" property="gname" />
		</association>
	</resultMap>
	
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value"
										item="listItem" open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		sid, sname, sex, age, gid
	</sql>
	
	<!-- 新建查询语句 -->
	<sql id="WithGrade_Column_List">
		s.sid, s.sname, s.sex, s.age, s.gid, g.gid, g.gname
	</sql>

	<!-- 查询附带年级的学生列表 -->
	<!-- List<Student> selectByExampleWithGrade(StudentExample example);  -->
	<select id="selectByExampleWithGrade" resultMap="WithGradeBaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="WithGrade_Column_List" />
		from student s left join grade g on s.gid = g.gid
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<!-- Student selectByPrimaryKeyWithGrade(Integer sid); -->
	<select id="selectByPrimaryKeyWithGrade" resultMap="WithGradeBaseResultMap">
	select
		<include refid="WithGrade_Column_List" />
		from student s left join grade g on s.gid = g.gid
		where sid = #{sid,jdbcType=INTEGER}
	</select>

	<select id="selectByExample"
		parameterType="com.food.bean.StudentExample" resultMap="BaseResultMap">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from student
		where sid = #{sid,jdbcType=INTEGER}
	</select>
	
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from student
		where sid = #{sid,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample"
		parameterType="com.food.bean.StudentExample">
		delete from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.food.bean.Student">
		insert into student (sid,
		sname, sex,
		age, gid)
		values (#{sid,jdbcType=INTEGER},
		#{sname,jdbcType=VARCHAR},
		#{sex,jdbcType=VARCHAR},
		#{age,jdbcType=INTEGER}, #{gid,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective"
		parameterType="com.food.bean.Student">
		insert into student
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="sid != null">
				sid,
			</if>
			<if test="sname != null">
				sname,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="age != null">
				age,
			</if>
			<if test="gid != null">
				gid,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="sid != null">
				#{sid,jdbcType=INTEGER},
			</if>
			<if test="sname != null">
				#{sname,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=INTEGER},
			</if>
			<if test="gid != null">
				#{gid,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.food.bean.StudentExample"
		resultType="java.lang.Long">
		select count(*) from student
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update student
		<set>
			<if test="record.sid != null">
				sid = #{record.sid,jdbcType=INTEGER},
			</if>
			<if test="record.sname != null">
				sname = #{record.sname,jdbcType=VARCHAR},
			</if>
			<if test="record.sex != null">
				sex = #{record.sex,jdbcType=VARCHAR},
			</if>
			<if test="record.age != null">
				age = #{record.age,jdbcType=INTEGER},
			</if>
			<if test="record.gid != null">
				gid = #{record.gid,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update student
		set sid = #{record.sid,jdbcType=INTEGER},
		sname =
		#{record.sname,jdbcType=VARCHAR},
		sex = #{record.sex,jdbcType=VARCHAR},
		age = #{record.age,jdbcType=INTEGER},
		gid =
		#{record.gid,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective"
		parameterType="com.food.bean.Student">
		update student
		<set>
			<if test="sname != null">
				sname = #{sname,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				age = #{age,jdbcType=INTEGER},
			</if>
			<if test="gid != null">
				gid = #{gid,jdbcType=INTEGER},
			</if>
		</set>
		where sid = #{sid,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="com.food.bean.Student">
		update student
		set sname = #{sname,jdbcType=VARCHAR},
		sex
		= #{sex,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER},
		gid =
		#{gid,jdbcType=INTEGER}
		where sid = #{sid,jdbcType=INTEGER}
	</update>
</mapper>